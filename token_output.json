[
"Token: let, Lexeme: LET",
"Token: identifier, Lexeme: a",
"Token: equal, Lexeme: =",
"Token: number, Lexeme: 5",
"Token: let, Lexeme: LET",
"Token: identifier, Lexeme: b",
"Token: equal, Lexeme: =",
"Token: left_brack, Lexeme: [",
"Token: number, Lexeme: 1",
"Token: comma, Lexeme: ,",
"Token: number, Lexeme: 2",
"Token: comma, Lexeme: ,",
"Token: number, Lexeme: 3",
"Token: right_brack, Lexeme: ]",
"Token: let, Lexeme: LET",
"Token: identifier, Lexeme: c",
"Token: equal, Lexeme: =",
"Token: identifier, Lexeme: a",
"Token: operator, Lexeme: +",
"Token: number, Lexeme: 10",
"Token: call, Lexeme: CALL",
"Token: identifier, Lexeme: myFunction",
"Token: left_paren, Lexeme: (",
"Token: identifier, Lexeme: a",
"Token: comma, Lexeme: ,",
"Token: identifier, Lexeme: b",
"Token: right_paren, Lexeme: )",
"Token: if, Lexeme: IF",
"Token: identifier, Lexeme: a",
"Token: operator, Lexeme: <",
"Token: number, Lexeme: 10",
"Token: then, Lexeme: THEN",
"Token: let, Lexeme: LET",
"Token: identifier, Lexeme: d",
"Token: equal, Lexeme: =",
"Token: identifier, Lexeme: a",
"Token: operator, Lexeme: *",
"Token: number, Lexeme: 2",
"Token: if, Lexeme: IF",
"Token: identifier, Lexeme: a",
"Token: operator, Lexeme: <",
"Token: number, Lexeme: 10",
"Token: then, Lexeme: THEN",
"Token: let, Lexeme: LET",
"Token: identifier, Lexeme: d",
"Token: equal, Lexeme: =",
"Token: identifier, Lexeme: a",
"Token: operator, Lexeme: *",
"Token: number, Lexeme: 2",
"Token: else, Lexeme: ELSE",
"Token: let, Lexeme: LET",
"Token: identifier, Lexeme: d",
"Token: equal, Lexeme: =",
"Token: listElement, Lexeme: b[1]",
"Token: endif, Lexeme: ENDIF",
"Token: else, Lexeme: ELSE",
"Token: let, Lexeme: LET",
"Token: identifier, Lexeme: d",
"Token: equal, Lexeme: =",
"Token: listElement, Lexeme: b[1]",
"Token: endif, Lexeme: ENDIF",
"Token: while, Lexeme: WHILE",
"Token: identifier, Lexeme: a",
"Token: operator, Lexeme: >",
"Token: number, Lexeme: 0",
"Token: do, Lexeme: DO",
"Token: let, Lexeme: LET",
"Token: identifier, Lexeme: a",
"Token: equal, Lexeme: =",
"Token: identifier, Lexeme: a",
"Token: operator, Lexeme: -",
"Token: number, Lexeme: 1",
"Token: do, Lexeme: DO",
"Token: call, Lexeme: CALL",
"Token: identifier, Lexeme: anotherFunction",
"Token: left_paren, Lexeme: (",
"Token: identifier, Lexeme: c",
"Token: right_paren, Lexeme: )",
"Token: while, Lexeme: WHILE",
"Token: identifier, Lexeme: c",
"Token: operator, Lexeme: <",
"Token: number, Lexeme: 100",
"Token: endwhile, Lexeme: ENDWHILE",
"Token: do, Lexeme: DO",
"Token: call, Lexeme: CALL",
"Token: identifier, Lexeme: anotherFunction",
"Token: left_paren, Lexeme: (",
"Token: identifier, Lexeme: c",
"Token: right_paren, Lexeme: )",
"Token: while, Lexeme: WHILE",
"Token: identifier, Lexeme: c",
"Token: operator, Lexeme: <",
"Token: number, Lexeme: 100",
"Token: for, Lexeme: FOR",
"Token: identifier, Lexeme: i",
"Token: equal, Lexeme: =",
"Token: number, Lexeme: 1",
"Token: to, Lexeme: TO",
"Token: number, Lexeme: 10",
"Token: step, Lexeme: STEP",
"Token: number, Lexeme: 2",
"Token: do, Lexeme: DO",
"Token: let, Lexeme: LET",
"Token: identifier, Lexeme: e",
"Token: equal, Lexeme: =",
"Token: identifier, Lexeme: i",
"Token: operator, Lexeme: *",
"Token: number, Lexeme: 2",
"Token: for, Lexeme: FOR",
"Token: identifier, Lexeme: x",
"Token: in, Lexeme: IN",
"Token: range, Lexeme: 'RANGE'",
"Token: left_paren, Lexeme: '('",
"Token: number, Lexeme: 1",
"Token: comma, Lexeme: ,",
"Token: number, Lexeme: 5",
"Token: comma, Lexeme: ,",
"Token: number, Lexeme: 1",
"Token: right_paren, Lexeme: )",
"Token: do, Lexeme: DO",
"Token: let, Lexeme: LET",
"Token: identifier, Lexeme: f",
"Token: equal, Lexeme: =",
"Token: identifier, Lexeme: x",
"Token: operator, Lexeme: +",
"Token: number, Lexeme: 3",
"Token: endfor, Lexeme: ENDFOR",
"Token: endfor, Lexeme: ENDFOR",
"Token: for, Lexeme: FOR",
"Token: identifier, Lexeme: x",
"Token: in, Lexeme: IN",
"Token: range, Lexeme: 'RANGE'",
"Token: left_paren, Lexeme: '('",
"Token: number, Lexeme: 1",
"Token: comma, Lexeme: ,",
"Token: number, Lexeme: 5",
"Token: comma, Lexeme: ,",
"Token: number, Lexeme: 1",
"Token: right_paren, Lexeme: )",
"Token: do, Lexeme: DO",
"Token: let, Lexeme: LET",
"Token: identifier, Lexeme: f",
"Token: equal, Lexeme: =",
"Token: identifier, Lexeme: x",
"Token: operator, Lexeme: +",
"Token: number, Lexeme: 3",
"Token: endfor, Lexeme: ENDFOR",
"Token: repeat, Lexeme: REPEAT",
"Token: let, Lexeme: LET",
"Token: identifier, Lexeme: g",
"Token: equal, Lexeme: =",
"Token: identifier, Lexeme: f",
"Token: operator, Lexeme: *",
"Token: number, Lexeme: 2",
"Token: repeat, Lexeme: REPEAT",
"Token: let, Lexeme: LET",
"Token: identifier, Lexeme: g",
"Token: equal, Lexeme: =",
"Token: identifier, Lexeme: f",
"Token: operator, Lexeme: *",
"Token: number, Lexeme: 2",
"Token: until, Lexeme: UNTIL",
"Token: identifier, Lexeme: g",
"Token: operator, Lexeme: >",
"Token: number, Lexeme: 20",
"Token: until, Lexeme: UNTIL",
"Token: identifier, Lexeme: g",
"Token: operator, Lexeme: >",
"Token: number, Lexeme: 20",
"Token: func, Lexeme: FUNC",
"Token: identifier, Lexeme: add",
"Token: left_paren, Lexeme: (",
"Token: identifier, Lexeme: a",
"Token: comma, Lexeme: ,",
"Token: identifier, Lexeme: b",
"Token: right_paren, Lexeme: )",
"Token: begin, Lexeme: BEGIN",
"Token: func, Lexeme: FUNC",
"Token: identifier, Lexeme: add",
"Token: left_paren, Lexeme: (",
"Token: identifier, Lexeme: a",
"Token: comma, Lexeme: ,",
"Token: identifier, Lexeme: b",
"Token: right_paren, Lexeme: )",
"Token: begin, Lexeme: BEGIN",
"Token: identifier, Lexeme: i",
"Token: decrement, Lexeme: --",
"Token: return, Lexeme: RETURN",
"Token: identifier, Lexeme: a",
"Token: operator, Lexeme: +",
"Token: identifier, Lexeme: b",
"Token: end, Lexeme: END",
"Token: return, Lexeme: RETURN",
"Token: identifier, Lexeme: a",
"Token: operator, Lexeme: +",
"Token: identifier, Lexeme: b",
"Token: end, Lexeme: END",
"Token: identifier, Lexeme: h",
"Token: compound_operator, Lexeme: +=",
"Token: number, Lexeme: 1",
"Token: identifier, Lexeme: i",
"Token: decrement, Lexeme: --"
]